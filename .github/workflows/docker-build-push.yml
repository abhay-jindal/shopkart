name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # Job to determine version and create tags
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      latest: ${{ steps.version.outputs.latest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # For tags, use the tag name without 'v' prefix
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            TAG=${GITHUB_REF#refs/tags/}
            LATEST="true"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            # For main branch, use latest commit hash
            VERSION=$(git rev-parse --short HEAD)
            TAG="latest"
            LATEST="true"
          elif [[ $GITHUB_REF == refs/heads/develop ]]; then
            # For develop branch, use latest commit hash with 'dev' prefix
            VERSION="dev-$(git rev-parse --short HEAD)"
            TAG="dev"
            LATEST="false"
          else
            # For other branches, use branch name and commit hash
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            BRANCH_NAME=${BRANCH_NAME//\//-}
            VERSION="${BRANCH_NAME}-$(git rev-parse --short HEAD)"
            TAG="pr"
            LATEST="false"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "latest=${LATEST}" >> $GITHUB_OUTPUT
          
          echo "Version: ${VERSION}"
          echo "Tag: ${TAG}"
          echo "Latest: ${LATEST}"

  # Job to build and push backend image
  build-backend:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.version.outputs.tag }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job to build and push frontend image
  build-frontend:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.version.outputs.tag }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job to build and push combined image (optional)
  build-combined:
    needs: version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta-combined
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_app
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ needs.version.outputs.tag }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push combined image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-combined.outputs.tags }}
          labels: ${{ steps.meta-combined.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job to create release with image information
  create-release:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Docker Images
            
            ### Backend
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_backend:${{ github.ref_name }}`
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_backend:latest`
            
            ### Frontend
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_frontend:${{ github.ref_name }}`
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_frontend:latest`
            
            ### Combined App (if applicable)
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_app:${{ github.ref_name }}`
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_app:latest`
            
            ## Usage
            
            ```bash
            # Pull the latest images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_backend:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_frontend:latest
            
            # Or pull specific version
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_backend:${{ github.ref_name }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_frontend:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false

  # Job to notify on successful build
  notify:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Docker images built and pushed successfully!"
          echo "Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_backend"
          echo "Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/shopkart_frontend"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Docker build failed!"
          echo "Please check the logs for more details." 